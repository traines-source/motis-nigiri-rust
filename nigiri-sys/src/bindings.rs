/* automatically generated by rust-bindgen 0.70.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C2X_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 39;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nigiri_timetable {
    _unused: [u8; 0],
}
pub type nigiri_timetable_t = nigiri_timetable;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nigiri_transport {
    pub route_idx: u32,
    pub n_event_mams: u16,
    pub event_mams: *mut i16,
    pub name: *const ::std::os::raw::c_char,
    pub name_len: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nigiri_transport"][::std::mem::size_of::<nigiri_transport>() - 32usize];
    ["Alignment of nigiri_transport"][::std::mem::align_of::<nigiri_transport>() - 8usize];
    ["Offset of field: nigiri_transport::route_idx"]
        [::std::mem::offset_of!(nigiri_transport, route_idx) - 0usize];
    ["Offset of field: nigiri_transport::n_event_mams"]
        [::std::mem::offset_of!(nigiri_transport, n_event_mams) - 4usize];
    ["Offset of field: nigiri_transport::event_mams"]
        [::std::mem::offset_of!(nigiri_transport, event_mams) - 8usize];
    ["Offset of field: nigiri_transport::name"]
        [::std::mem::offset_of!(nigiri_transport, name) - 16usize];
    ["Offset of field: nigiri_transport::name_len"]
        [::std::mem::offset_of!(nigiri_transport, name_len) - 24usize];
};
pub type nigiri_transport_t = nigiri_transport;
pub const kTargetBits: u32 = 22;
pub const kDurationBits: u32 = 10;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nigiri_footpath {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nigiri_footpath"][::std::mem::size_of::<nigiri_footpath>() - 4usize];
    ["Alignment of nigiri_footpath"][::std::mem::align_of::<nigiri_footpath>() - 4usize];
};
impl nigiri_footpath {
    #[inline]
    pub fn target_location_idx(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 22u8) as u32) }
    }
    #[inline]
    pub fn set_target_location_idx(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 22u8, val as u64)
        }
    }
    #[inline]
    pub fn duration(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 10u8) as u32) }
    }
    #[inline]
    pub fn set_duration(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(22usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        target_location_idx: ::std::os::raw::c_uint,
        duration: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 22u8, {
            let target_location_idx: u32 = unsafe { ::std::mem::transmute(target_location_idx) };
            target_location_idx as u64
        });
        __bindgen_bitfield_unit.set(22usize, 10u8, {
            let duration: u32 = unsafe { ::std::mem::transmute(duration) };
            duration as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type nigiri_footpath_t = nigiri_footpath;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nigiri_location {
    pub id: *const ::std::os::raw::c_char,
    pub id_len: u32,
    pub name: *const ::std::os::raw::c_char,
    pub name_len: u32,
    pub lon: f64,
    pub lat: f64,
    pub transfer_time: u16,
    pub footpaths: *mut nigiri_footpath_t,
    pub n_footpaths: u32,
    pub parent: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nigiri_location"][::std::mem::size_of::<nigiri_location>() - 72usize];
    ["Alignment of nigiri_location"][::std::mem::align_of::<nigiri_location>() - 8usize];
    ["Offset of field: nigiri_location::id"][::std::mem::offset_of!(nigiri_location, id) - 0usize];
    ["Offset of field: nigiri_location::id_len"]
        [::std::mem::offset_of!(nigiri_location, id_len) - 8usize];
    ["Offset of field: nigiri_location::name"]
        [::std::mem::offset_of!(nigiri_location, name) - 16usize];
    ["Offset of field: nigiri_location::name_len"]
        [::std::mem::offset_of!(nigiri_location, name_len) - 24usize];
    ["Offset of field: nigiri_location::lon"]
        [::std::mem::offset_of!(nigiri_location, lon) - 32usize];
    ["Offset of field: nigiri_location::lat"]
        [::std::mem::offset_of!(nigiri_location, lat) - 40usize];
    ["Offset of field: nigiri_location::transfer_time"]
        [::std::mem::offset_of!(nigiri_location, transfer_time) - 48usize];
    ["Offset of field: nigiri_location::footpaths"]
        [::std::mem::offset_of!(nigiri_location, footpaths) - 56usize];
    ["Offset of field: nigiri_location::n_footpaths"]
        [::std::mem::offset_of!(nigiri_location, n_footpaths) - 64usize];
    ["Offset of field: nigiri_location::parent"]
        [::std::mem::offset_of!(nigiri_location, parent) - 68usize];
};
pub type nigiri_location_t = nigiri_location;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nigiri_route_stop {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nigiri_route_stop"][::std::mem::size_of::<nigiri_route_stop>() - 4usize];
    ["Alignment of nigiri_route_stop"][::std::mem::align_of::<nigiri_route_stop>() - 4usize];
};
impl nigiri_route_stop {
    #[inline]
    pub fn location_idx(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 28u8) as u32) }
    }
    #[inline]
    pub fn set_location_idx(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub fn in_allowed(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_in_allowed(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn out_allowed(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_out_allowed(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn in_allowed_wheelchair(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_in_allowed_wheelchair(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn out_allowed_wheelchair(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_out_allowed_wheelchair(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        location_idx: ::std::os::raw::c_uint,
        in_allowed: ::std::os::raw::c_uint,
        out_allowed: ::std::os::raw::c_uint,
        in_allowed_wheelchair: ::std::os::raw::c_uint,
        out_allowed_wheelchair: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 28u8, {
            let location_idx: u32 = unsafe { ::std::mem::transmute(location_idx) };
            location_idx as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let in_allowed: u32 = unsafe { ::std::mem::transmute(in_allowed) };
            in_allowed as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let out_allowed: u32 = unsafe { ::std::mem::transmute(out_allowed) };
            out_allowed as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let in_allowed_wheelchair: u32 =
                unsafe { ::std::mem::transmute(in_allowed_wheelchair) };
            in_allowed_wheelchair as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let out_allowed_wheelchair: u32 =
                unsafe { ::std::mem::transmute(out_allowed_wheelchair) };
            out_allowed_wheelchair as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type nigiri_route_stop_t = nigiri_route_stop;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nigiri_route {
    pub n_stops: u16,
    pub stops: *mut nigiri_route_stop_t,
    pub clasz: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nigiri_route"][::std::mem::size_of::<nigiri_route>() - 24usize];
    ["Alignment of nigiri_route"][::std::mem::align_of::<nigiri_route>() - 8usize];
    ["Offset of field: nigiri_route::n_stops"]
        [::std::mem::offset_of!(nigiri_route, n_stops) - 0usize];
    ["Offset of field: nigiri_route::stops"][::std::mem::offset_of!(nigiri_route, stops) - 8usize];
    ["Offset of field: nigiri_route::clasz"][::std::mem::offset_of!(nigiri_route, clasz) - 16usize];
};
pub type nigiri_route_t = nigiri_route;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nigiri_event_change {
    pub transport_idx: u32,
    pub day_idx: u16,
    pub stop_idx: u16,
    pub is_departure: bool,
    pub stop_change: bool,
    pub stop_location_idx: u32,
    pub stop_in_out_allowed: bool,
    pub delay: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nigiri_event_change"][::std::mem::size_of::<nigiri_event_change>() - 20usize];
    ["Alignment of nigiri_event_change"][::std::mem::align_of::<nigiri_event_change>() - 4usize];
    ["Offset of field: nigiri_event_change::transport_idx"]
        [::std::mem::offset_of!(nigiri_event_change, transport_idx) - 0usize];
    ["Offset of field: nigiri_event_change::day_idx"]
        [::std::mem::offset_of!(nigiri_event_change, day_idx) - 4usize];
    ["Offset of field: nigiri_event_change::stop_idx"]
        [::std::mem::offset_of!(nigiri_event_change, stop_idx) - 6usize];
    ["Offset of field: nigiri_event_change::is_departure"]
        [::std::mem::offset_of!(nigiri_event_change, is_departure) - 8usize];
    ["Offset of field: nigiri_event_change::stop_change"]
        [::std::mem::offset_of!(nigiri_event_change, stop_change) - 9usize];
    ["Offset of field: nigiri_event_change::stop_location_idx"]
        [::std::mem::offset_of!(nigiri_event_change, stop_location_idx) - 12usize];
    ["Offset of field: nigiri_event_change::stop_in_out_allowed"]
        [::std::mem::offset_of!(nigiri_event_change, stop_in_out_allowed) - 16usize];
    ["Offset of field: nigiri_event_change::delay"]
        [::std::mem::offset_of!(nigiri_event_change, delay) - 18usize];
};
pub type nigiri_event_change_t = nigiri_event_change;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nigiri_leg {
    pub is_footpath: bool,
    pub transport_idx: u32,
    pub day_idx: u16,
    pub from_stop_idx: u16,
    pub from_location_idx: u32,
    pub to_stop_idx: u16,
    pub to_location_idx: u32,
    pub duration: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nigiri_leg"][::std::mem::size_of::<nigiri_leg>() - 28usize];
    ["Alignment of nigiri_leg"][::std::mem::align_of::<nigiri_leg>() - 4usize];
    ["Offset of field: nigiri_leg::is_footpath"]
        [::std::mem::offset_of!(nigiri_leg, is_footpath) - 0usize];
    ["Offset of field: nigiri_leg::transport_idx"]
        [::std::mem::offset_of!(nigiri_leg, transport_idx) - 4usize];
    ["Offset of field: nigiri_leg::day_idx"][::std::mem::offset_of!(nigiri_leg, day_idx) - 8usize];
    ["Offset of field: nigiri_leg::from_stop_idx"]
        [::std::mem::offset_of!(nigiri_leg, from_stop_idx) - 10usize];
    ["Offset of field: nigiri_leg::from_location_idx"]
        [::std::mem::offset_of!(nigiri_leg, from_location_idx) - 12usize];
    ["Offset of field: nigiri_leg::to_stop_idx"]
        [::std::mem::offset_of!(nigiri_leg, to_stop_idx) - 16usize];
    ["Offset of field: nigiri_leg::to_location_idx"]
        [::std::mem::offset_of!(nigiri_leg, to_location_idx) - 20usize];
    ["Offset of field: nigiri_leg::duration"]
        [::std::mem::offset_of!(nigiri_leg, duration) - 24usize];
};
pub type nigiri_leg_t = nigiri_leg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nigiri_journey {
    pub n_legs: u16,
    pub legs: *mut nigiri_leg_t,
    pub start_time: i64,
    pub dest_time: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nigiri_journey"][::std::mem::size_of::<nigiri_journey>() - 32usize];
    ["Alignment of nigiri_journey"][::std::mem::align_of::<nigiri_journey>() - 8usize];
    ["Offset of field: nigiri_journey::n_legs"]
        [::std::mem::offset_of!(nigiri_journey, n_legs) - 0usize];
    ["Offset of field: nigiri_journey::legs"]
        [::std::mem::offset_of!(nigiri_journey, legs) - 8usize];
    ["Offset of field: nigiri_journey::start_time"]
        [::std::mem::offset_of!(nigiri_journey, start_time) - 16usize];
    ["Offset of field: nigiri_journey::dest_time"]
        [::std::mem::offset_of!(nigiri_journey, dest_time) - 24usize];
};
pub type nigiri_journey_t = nigiri_journey;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nigiri_pareto_set {
    pub n_journeys: u16,
    pub journeys: *mut nigiri_journey_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nigiri_pareto_set"][::std::mem::size_of::<nigiri_pareto_set>() - 16usize];
    ["Alignment of nigiri_pareto_set"][::std::mem::align_of::<nigiri_pareto_set>() - 8usize];
    ["Offset of field: nigiri_pareto_set::n_journeys"]
        [::std::mem::offset_of!(nigiri_pareto_set, n_journeys) - 0usize];
    ["Offset of field: nigiri_pareto_set::journeys"]
        [::std::mem::offset_of!(nigiri_pareto_set, journeys) - 8usize];
};
pub type nigiri_pareto_set_t = nigiri_pareto_set;
extern "C" {
    pub fn nigiri_load(
        path: *const ::std::os::raw::c_char,
        from_ts: i64,
        to_ts: i64,
    ) -> *mut nigiri_timetable_t;
}
extern "C" {
    pub fn nigiri_load_linking_stops(
        path: *const ::std::os::raw::c_char,
        from_ts: i64,
        to_ts: i64,
        link_stop_distance: ::std::os::raw::c_uint,
    ) -> *mut nigiri_timetable_t;
}
extern "C" {
    pub fn nigiri_destroy(t: *const nigiri_timetable_t);
}
extern "C" {
    pub fn nigiri_get_start_day_ts(t: *const nigiri_timetable_t) -> i64;
}
extern "C" {
    pub fn nigiri_get_day_count(t: *const nigiri_timetable_t) -> u16;
}
extern "C" {
    pub fn nigiri_get_transport_count(t: *const nigiri_timetable_t) -> u32;
}
extern "C" {
    pub fn nigiri_get_transport(t: *const nigiri_timetable_t, idx: u32) -> *mut nigiri_transport_t;
}
extern "C" {
    pub fn nigiri_destroy_transport(transport: *const nigiri_transport_t);
}
extern "C" {
    pub fn nigiri_is_transport_active(
        t: *const nigiri_timetable_t,
        transport_idx: u32,
        day_idx: u16,
    ) -> bool;
}
extern "C" {
    pub fn nigiri_get_route_count(t: *const nigiri_timetable_t) -> u32;
}
extern "C" {
    pub fn nigiri_get_route(t: *const nigiri_timetable_t, idx: u32) -> *mut nigiri_route_t;
}
extern "C" {
    pub fn nigiri_destroy_route(route: *const nigiri_route_t);
}
extern "C" {
    pub fn nigiri_get_location_count(t: *const nigiri_timetable_t) -> u32;
}
extern "C" {
    pub fn nigiri_get_location(t: *const nigiri_timetable_t, idx: u32) -> *mut nigiri_location_t;
}
extern "C" {
    pub fn nigiri_get_location_with_footpaths(
        t: *const nigiri_timetable_t,
        idx: u32,
        incoming_footpaths: bool,
    ) -> *mut nigiri_location_t;
}
extern "C" {
    pub fn nigiri_destroy_location(location: *const nigiri_location_t);
}
extern "C" {
    pub fn nigiri_update_with_rt(
        t: *const nigiri_timetable_t,
        gtfsrt_pb_path: *const ::std::os::raw::c_char,
        callback: ::std::option::Option<
            unsafe extern "C" fn(arg1: nigiri_event_change_t, context: *mut ::std::os::raw::c_void),
        >,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn nigiri_get_journeys(
        t: *const nigiri_timetable_t,
        start_location_idx: u32,
        destination_location_idx: u32,
        time: i64,
        backward_search: bool,
    ) -> *mut nigiri_pareto_set_t;
}
extern "C" {
    pub fn nigiri_destroy_journeys(journeys: *const nigiri_pareto_set_t);
}
